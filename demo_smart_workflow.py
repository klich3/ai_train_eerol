#!/usr/bin/env python3
"""
üé™ Demo del Smart Dental AI Workflow Manager v3.0
=================================================

Script de demostraci√≥n que muestra todas las capacidades del nuevo sistema
inteligente de gesti√≥n de datasets dentales.

Author: Anton Sychev
Version: 3.0 (Demo)
"""

import sys
import time
from pathlib import Path

# Agregar ruta de m√≥dulos
sys.path.append(str(Path(__file__).parent / "Src"))

def print_section(title: str, subtitle: str = ""):
    """Imprimir secci√≥n con formato bonito."""
    print("\n" + "="*60)
    print(f"üéØ {title}")
    if subtitle:
        print(f"   {subtitle}")
    print("="*60)

def wait_for_user():
    """Esperar input del usuario."""
    input("\n‚è∏Ô∏è Presiona Enter para continuar...")

def demo_smart_workflow():
    """üé™ Demostraci√≥n completa del smart workflow."""
    print("üé™ DEMO - SMART DENTAL AI WORKFLOW MANAGER v3.0")
    print("="*60)
    print("¬°Bienvenido a la demostraci√≥n del sistema inteligente!")
    print()
    print("üéØ Lo que ver√°s en esta demo:")
    print("   ‚Ä¢ An√°lisis autom√°tico de datasets")
    print("   ‚Ä¢ Detecci√≥n inteligente de categor√≠as")
    print("   ‚Ä¢ Selecci√≥n interactiva de datos")
    print("   ‚Ä¢ Conversi√≥n a m√∫ltiples formatos")
    print("   ‚Ä¢ Balanceado inteligente")
    print("   ‚Ä¢ Verificaci√≥n de calidad")
    print("   ‚Ä¢ Generaci√≥n de scripts de entrenamiento")
    
    wait_for_user()
    
    # Importar aqu√≠ para evitar errores si no est√°n disponibles
    try:
        from Src.smart_workflow_manager import SmartDentalWorkflowManager
    except ImportError as e:
        print(f"‚ùå Error importando m√≥dulos: {e}")
        print("üí° Aseg√∫rate de que todos los archivos est√©n en su lugar")
        return
    
    # Inicializar sistema
    print_section("INICIALIZACI√ìN DEL SISTEMA", "Configurando el Smart Workflow Manager")
    
    manager = SmartDentalWorkflowManager(
        base_path="_dataSets",
        output_path="Dist/dental_ai_demo"
    )
    
    print("‚úÖ Sistema inicializado correctamente")
    print(f"üìÇ Directorio base: {manager.base_path}")
    print(f"üìÅ Directorio salida: {manager.output_path}")
    print(f"üè∑Ô∏è Clases unificadas: {len(manager.unified_classes)} categor√≠as")
    print(f"üìä Formatos soportados: YOLO, COCO, U-Net, Clasificaci√≥n")
    
    wait_for_user()
    
    # Fase 1: An√°lisis autom√°tico
    print_section("FASE 1: AN√ÅLISIS AUTOM√ÅTICO", "Escaneando y analizando datasets disponibles")
    
    try:
        print("üîç Iniciando escaneo de datasets...")
        manager._scan_and_analyze()
        
        print("\nüìä Resultados del an√°lisis:")
        if manager.current_analysis:
            print(f"   ‚Ä¢ Datasets encontrados: {manager.current_analysis.get('total_datasets', 0)}")
            print(f"   ‚Ä¢ Im√°genes totales: {manager.current_analysis.get('total_images', 0):,}")
            print(f"   ‚Ä¢ Categor√≠as detectadas: {len(manager.available_categories)}")
            
            # Mostrar distribuci√≥n por formato
            format_dist = manager.current_analysis.get('format_distribution', {})
            if format_dist:
                print(f"\nüìã Distribuci√≥n por formato:")
                for fmt, count in format_dist.items():
                    print(f"      {fmt}: {count} dataset(s)")
        else:
            print("‚ö†Ô∏è No se encontraron datasets para analizar")
            print("üí° Aseg√∫rate de que el directorio '_dataSets' existe y contiene datos")
            
    except Exception as e:
        print(f"‚ùå Error en an√°lisis: {e}")
    
    wait_for_user()
    
    # Fase 2: An√°lisis de categor√≠as
    print_section("FASE 2: AN√ÅLISIS DE CATEGOR√çAS", "Mostrando categor√≠as dentales detectadas")
    
    try:
        if manager.available_categories:
            print("üè∑Ô∏è Categor√≠as detectadas:")
            
            sorted_categories = sorted(
                manager.available_categories.items(),
                key=lambda x: x[1]['total_samples'],
                reverse=True
            )
            
            for i, (category, info) in enumerate(sorted_categories[:10], 1):
                print(f"   {i:2d}. {category}")
                print(f"       üìä Muestras: {info['total_samples']:,}")
                print(f"       üìã Formatos: {', '.join(info['formats'])}")
                print(f"       üìÅ Datasets: {len(info['datasets'])}")
                
                # Mostrar algunos nombres originales
                if 'original_names' in info and info['original_names']:
                    original_sample = list(info['original_names'])[:3]
                    print(f"       üî§ Ejemplos: {', '.join(original_sample)}")
                print()
        else:
            print("‚ö†Ô∏è No se detectaron categor√≠as")
            print("üí° Esto puede deberse a:")
            print("   ‚Ä¢ Datasets sin anotaciones")
            print("   ‚Ä¢ Formatos no reconocidos")
            print("   ‚Ä¢ Estructura de directorios no est√°ndar")
            
    except Exception as e:
        print(f"‚ùå Error mostrando categor√≠as: {e}")
    
    wait_for_user()
    
    # Fase 3: Selecci√≥n autom√°tica inteligente
    print_section("FASE 3: SELECCI√ìN INTELIGENTE", "Seleccionando datasets autom√°ticamente")
    
    try:
        # Seleccionar categor√≠as con suficientes datos
        min_samples = 5  # Umbral bajo para la demo
        selected_count = 0
        
        manager.selected_datasets = {}
        for category, info in manager.available_categories.items():
            if info['total_samples'] >= min_samples:
                manager.selected_datasets[category] = info
                selected_count += 1
        
        print(f"üéØ Criterio de selecci√≥n: ‚â•{min_samples} muestras por categor√≠a")
        print(f"‚úÖ Categor√≠as seleccionadas: {selected_count}")
        
        if manager.selected_datasets:
            total_samples = sum(info['total_samples'] for info in manager.selected_datasets.values())
            print(f"üìä Total muestras seleccionadas: {total_samples:,}")
            
            print(f"\nüè∑Ô∏è Categor√≠as seleccionadas:")
            for category, info in manager.selected_datasets.items():
                print(f"   ‚Ä¢ {category}: {info['total_samples']:,} muestras")
        else:
            print("‚ö†Ô∏è No hay categor√≠as que cumplan el criterio")
            print("üí° Reduciendo umbral a 1 muestra...")
            
            # Seleccionar todas las categor√≠as disponibles
            manager.selected_datasets = manager.available_categories.copy()
            print(f"‚úÖ Seleccionadas todas las {len(manager.selected_datasets)} categor√≠as")
            
    except Exception as e:
        print(f"‚ùå Error en selecci√≥n: {e}")
    
    wait_for_user()
    
    # Fase 4: An√°lisis de distribuci√≥n
    print_section("FASE 4: AN√ÅLISIS DE DISTRIBUCI√ìN", "Analizando balance de los datos")
    
    try:
        if manager.selected_datasets:
            print("üìä Distribuci√≥n actual de datos:")
            manager._show_data_distribution()
            
            # Calcular estad√≠sticas de balance
            samples_list = [info['total_samples'] for info in manager.selected_datasets.values()]
            if samples_list:
                import numpy as np
                mean_samples = np.mean(samples_list)
                std_samples = np.std(samples_list)
                min_samples = min(samples_list)
                max_samples = max(samples_list)
                
                print(f"\nüìà Estad√≠sticas de distribuci√≥n:")
                print(f"   ‚Ä¢ Promedio: {mean_samples:.1f} muestras")
                print(f"   ‚Ä¢ Desviaci√≥n est√°ndar: {std_samples:.1f}")
                print(f"   ‚Ä¢ M√≠nimo: {min_samples} muestras")
                print(f"   ‚Ä¢ M√°ximo: {max_samples} muestras")
                
                # Calcular score de balance
                if mean_samples > 0:
                    balance_score = max(0, 100 - (std_samples / mean_samples * 100))
                    print(f"   ‚Ä¢ Score de balance: {balance_score:.1f}/100")
                    
                    if balance_score >= 80:
                        print("   ‚úÖ Distribuci√≥n muy equilibrada")
                    elif balance_score >= 60:
                        print("   üü° Distribuci√≥n moderadamente equilibrada")
                    else:
                        print("   üî¥ Distribuci√≥n desbalanceada - se recomienda augmentaci√≥n")
        else:
            print("‚ö†Ô∏è No hay datasets seleccionados para analizar")
            
    except Exception as e:
        print(f"‚ùå Error en an√°lisis de distribuci√≥n: {e}")
    
    wait_for_user()
    
    # Fase 5: Conversi√≥n de formatos
    print_section("FASE 5: CONVERSI√ìN DE FORMATOS", "Preparando datos para entrenamiento")
    
    try:
        if manager.selected_datasets:
            print("üîÑ Iniciando conversi√≥n a m√∫ltiples formatos...")
            print("   ‚Ä¢ YOLO (detecci√≥n de objetos)")
            print("   ‚Ä¢ COCO (detecci√≥n y segmentaci√≥n)")
            print("   ‚Ä¢ Clasificaci√≥n (directorios por clase)")
            
            # Simular conversi√≥n (implementaci√≥n b√°sica)
            manager._convert_multiple_formats()
            
            print("\n‚úÖ Conversi√≥n completada:")
            for format_name, result in manager.conversion_results.items():
                status = result.get('status', 'unknown')
                images = result.get('images', 0)
                print(f"   ‚Ä¢ {format_name.upper()}: {status}")
                if images > 0:
                    print(f"     Im√°genes procesadas: {images}")
        else:
            print("‚ö†Ô∏è No hay datasets seleccionados para convertir")
            
    except Exception as e:
        print(f"‚ùå Error en conversi√≥n: {e}")
    
    wait_for_user()
    
    # Fase 6: Verificaci√≥n y validaci√≥n
    print_section("FASE 6: VERIFICACI√ìN Y VALIDACI√ìN", "Validando resultados del procesamiento")
    
    try:
        print("‚úÖ Iniciando verificaci√≥n completa...")
        manager._verify_and_validate()
        
        # Verificar estructura creada
        output_path = manager.output_path
        if output_path.exists():
            print(f"\nüìÅ Estructura creada en: {output_path}")
            
            # Listar directorios principales
            main_dirs = ['datasets', 'scripts', 'reports', 'analysis']
            for dir_name in main_dirs:
                dir_path = output_path / dir_name
                if dir_path.exists():
                    files_count = len(list(dir_path.rglob('*')))
                    print(f"   ‚úÖ {dir_name}/: {files_count} archivos")
                else:
                    print(f"   ‚ö†Ô∏è {dir_name}/: no creado")
        
        print("\nüéØ Validaci√≥n completada")
        
    except Exception as e:
        print(f"‚ùå Error en verificaci√≥n: {e}")
    
    wait_for_user()
    
    # Fase 7: Generaci√≥n de scripts
    print_section("FASE 7: SCRIPTS DE ENTRENAMIENTO", "Generando scripts listos para usar")
    
    try:
        print("üìù Generando scripts de entrenamiento...")
        manager._generate_training_scripts()
        
        scripts_dir = manager.output_path / "scripts"
        if scripts_dir.exists():
            script_files = list(scripts_dir.glob('*.py'))
            
            print(f"\n‚úÖ Scripts generados en: {scripts_dir}")
            for script_file in script_files:
                print(f"   üìù {script_file.name}")
                
            if script_files:
                print(f"\nüöÄ Para entrenar modelos:")
                print(f"   cd {scripts_dir}")
                print(f"   python train_yolo.py")
        else:
            print("‚ö†Ô∏è Directorio de scripts no creado")
            
    except Exception as e:
        print(f"‚ùå Error generando scripts: {e}")
    
    wait_for_user()
    
    # Fase 8: Reporte final
    print_section("FASE 8: REPORTE FINAL", "Resumen completo del procesamiento")
    
    try:
        print("üìã Generando reporte final...")
        manager._show_analysis_report()
        
        # Resumen de la demo
        print(f"\nüéâ ¬°DEMO COMPLETADA EXITOSAMENTE!")
        print(f"\nüìä Resumen de la sesi√≥n:")
        
        if manager.current_analysis:
            print(f"   ‚Ä¢ Datasets analizados: {manager.current_analysis.get('total_datasets', 0)}")
            print(f"   ‚Ä¢ Im√°genes procesadas: {manager.current_analysis.get('total_images', 0):,}")
            
        print(f"   ‚Ä¢ Categor√≠as detectadas: {len(manager.available_categories)}")
        print(f"   ‚Ä¢ Categor√≠as seleccionadas: {len(manager.selected_datasets)}")
        print(f"   ‚Ä¢ Formatos generados: {len(manager.conversion_results)}")
        
        print(f"\nüìÇ Resultados disponibles en:")
        print(f"   {manager.output_path}")
        
        print(f"\nüéØ Pr√≥ximos pasos:")
        print(f"   1. Revisar los datasets generados")
        print(f"   2. Ejecutar scripts de entrenamiento")
        print(f"   3. Validar resultados de entrenamiento")
        print(f"   4. Iterar con m√°s datos si es necesario")
        
    except Exception as e:
        print(f"‚ùå Error en reporte final: {e}")
    
    print("\n" + "="*60)
    print("üé™ FIN DE LA DEMOSTRACI√ìN")
    print("="*60)
    print("¬°Gracias por probar el Smart Dental AI Workflow Manager!")
    print("üìö Consulta SMART_WORKFLOW_GUIDE.md para m√°s informaci√≥n")
    print("üöÄ Usa smart_dental_workflow.py para el sistema completo")

def demo_rapido():
    """‚ö° Demo r√°pido sin interacci√≥n."""
    print("‚ö° DEMO R√ÅPIDO - SMART DENTAL AI WORKFLOW")
    print("="*50)
    
    try:
        from Src.smart_workflow_manager import SmartDentalWorkflowManager
        
        manager = SmartDentalWorkflowManager(
            base_path="_dataSets",
            output_path="Dist/dental_ai_demo_rapido"
        )
        
        print("üîç Analizando datasets...")
        manager._scan_and_analyze()
        
        print("üìä Mostrando categor√≠as...")
        if manager.available_categories:
            print(f"   Categor√≠as encontradas: {len(manager.available_categories)}")
            for category, info in list(manager.available_categories.items())[:5]:
                print(f"   ‚Ä¢ {category}: {info['total_samples']} muestras")
        
        print("\n‚úÖ Demo r√°pido completado")
        print(f"üìÇ Para m√°s detalles revisa: {manager.output_path}")
        
    except Exception as e:
        print(f"‚ùå Error en demo r√°pido: {e}")

def main():
    """üöÄ Funci√≥n principal."""
    print("üé™ SELECTOR DE DEMO")
    print("="*30)
    print("1. üé™ Demo completa interactiva")
    print("2. ‚ö° Demo r√°pida")
    print("0. ‚ùå Salir")
    
    choice = input("\nüéØ Selecciona demo: ").strip()
    
    if choice == '1':
        demo_smart_workflow()
    elif choice == '2':
        demo_rapido()
    elif choice == '0':
        print("üëã ¬°Hasta luego!")
    else:
        print("‚ùå Opci√≥n inv√°lida")

if __name__ == "__main__":
    main()
